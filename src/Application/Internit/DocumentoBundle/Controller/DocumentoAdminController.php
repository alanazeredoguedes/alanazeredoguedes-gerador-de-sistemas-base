<?php

namespace App\Application\Internit\DocumentoBundle\Controller;

use App\Application\Internit\DocumentoBundle\Repository\DocumentoRepository;
use App\Application\Project\ContentBundle\Attributes\Acl as ACL;

use App\Application\Project\ContentBundle\Controller\Base\BaseAdminController;
use Sonata\AdminBundle\Datagrid\ProxyQueryInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

#[ACL\Admin(enable: true, title: 'Documento', description: 'PermissÃµes do modulo Documento')]
class DocumentoAdminController extends BaseAdminController
{



   /* protected function preEdit(Request $request, object $object): ?Response
    {
        $status = [
            'success' => 'sonata_flash_success',
            'info' => 'sonata_flash_info',
            'error' => 'sonata_flash_error'
        ];

        $repository = new DocumentoRepository($this->managerRegistry);
        $events = $repository->preEdit();

        foreach ($events as $event) {
            $this->addFlash($status[$event->status], $event->message);
        }


        $route = $request->attributes->get('_route');
        $id = $request->attributes->get('id');
       // dd($request);


        //return $this->redirectToRoute($route, ['id' => $id]);

        return parent::preEdit($request, $object); // TODO: Change the autogenerated stub
    }*/

    #[ACL\Admin(enable: true, title: 'Listar', description: 'Lista todos os documentos.')]
    public function listAction(Request $request): Response
    {
        $this->validateAccess("listAction");

        return parent::listAction($request);
    }

    #[ACL\Admin(enable: true, title: 'Visualizar', description: '')]
    public function showAction(Request $request): Response
    {
        $this->validateAccess("showAction");

        return parent::showAction($request);
    }


    #[ACL\Admin(enable: true, title: 'Criar', description: '')]
    public function createAction(Request $request): Response
    {
        $this->validateAccess("createAction");

        return parent::createAction($request);
    }

    #[ACL\Admin(enable: true, title: 'Editar', description: '')]
    public function editAction(Request $request): Response
    {
        $this->validateAccess("editAction");

        return parent::editAction($request);
    }

    #[ACL\Admin(enable: true, title: 'Excluir', description: '')]
    public function deleteAction(Request $request): Response
    {
        $this->validateAccess("deleteAction");

        return parent::deleteAction($request);
    }

    #[ACL\Admin(enable: true, title: 'Excluir em Lote', description: '')]
    public function batchActionDelete(ProxyQueryInterface $query): Response
    {
        $this->validateAccess("batchActionDelete");

        return parent::batchActionDelete($query);
    }

    public function batchAction(Request $request): Response
    {
        $this->validateAccess("batchActionDelete");

        return parent::batchAction($request);
    }

    #[ACL\Admin(enable: true, title: 'Exportar', description: '')]
    public function exportAction(Request $request): Response
    {
        $this->validateAccess("exportAction");

        return parent::exportAction($request);
    }

    #[ACL\Admin(enable: true, title: 'Auditoria', description: '')]
    public function historyAction(Request $request): Response
    {
        $this->validateAccess("historyAction");

        return parent::historyAction($request);
    }

    public function historyViewRevisionAction(Request $request, string $revision): Response
    {
        $this->validateAccess("historyAction");

        return parent::historyViewRevisionAction($request, $revision);
    }

    public function historyCompareRevisionsAction(Request $request, string $baseRevision, string $compareRevision): Response
    {
        $this->validateAccess("historyAction");

        return parent::historyCompareRevisionsAction($request, $baseRevision, $compareRevision);
    }




}